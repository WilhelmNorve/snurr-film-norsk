/* tslint:disable */
/* eslint-disable */
/**
 * Tikitok Norge API
 * Dette er en komplett OpenAPI 3.1-spesifikasjon for en TikTok-lignende app.  **Omfang** - **Klient/Frontend-API**: Endepunkter som brukes av mobil- og webklienter (autentisering, feed, videoer, kommentarer, likes, følgerelasjoner, søk, varsler, opplasting m.m.). - **Backend/Admin-API**: Moderasjon, innholdsflagg, overstyringer, metrikker og backoffice-jobber. - **Webhooks**: Hendelser sendt til tredjepart-/interne konsumenter.  **Konvensjoner** - Versjonering via URL (`/v1`) og `X-API-Version` header. - Cursor-basert paginering med `next_cursor` og `prev_cursor`. - Alle tidsstempler i ISO 8601 (UTC). - Feil følger RFC 9457-lignende struktur. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';

export const BASE_PATH = "https://api.tikitok.no/v1".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface RequestArgs
 */
export interface RequestArgs {
    url: string;
    options: RawAxiosRequestConfig;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration | undefined;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath ?? basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    constructor(public field: string, msg?: string) {
        super(msg);
        this.name = "RequiredError"
    }
}

interface ServerMap {
    [key: string]: {
        url: string,
        description: string,
    }[];
}

/**
 *
 * @export
 */
export const operationServerMap: ServerMap = {
}
